package shapes;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class Main {

	public static void main(String []args) {
		String fileName = "shapes.txt";
		
		System.out.println("------->JAC 444 Assignment 1<-------");
		System.out.println("------->Task 1 ... <-------");
		
		Shapes shapeArray[] = new Shapes[32];
		int count = 0;
		String s;
		
		try (BufferedReader br = new BufferedReader(new FileReader(fileName))) {
			while ((s = br.readLine()) != null) {
			String[] tokens = s.split(",");
//				for(int i = 0; i < tokens.length; i++){
//					switch(tokens[i]) {
//					case "Circle":
//						if(tokens.length == 2 && Double.parseDouble(tokens[1]) > 0) {
//							shapeArray[count] = new Circle(Double.parseDouble(tokens[1]));
//							count++;
//						}
//						else {
//							System.out.println("Invalid radius!");
//						}
//						break;
//						
//					case "Parallelogram":
//						if(tokens.length == 3 && Double.parseDouble(tokens[1]) > 0 &&  Double.parseDouble(tokens[2]) > 0) {
//							shapeArray[count] = new Parallelogram(Double.parseDouble(tokens[1]), Double.parseDouble(tokens[2]));
//							count++;
//						}
//						else {
//							System.out.println("Invalid side!");
//						}
//						break;
//						
//					case "Rectangle":
//						if(tokens.length == 3 && Double.parseDouble(tokens[1]) > 0 &&  Double.parseDouble(tokens[2]) > 0) {
//							shapeArray[count] = new Rectangle(Double.parseDouble(tokens[1]), Double.parseDouble(tokens[2]));
//							count++;
//						}
//						else {
//							System.out.println("Invalid side!");
//						}
//						break;
//						
//					case "Square":
//						if(tokens.length == 2 && Double.parseDouble(tokens[1]) > 0) {
//							shapeArray[count] = new Square(Double.parseDouble(tokens[1]));
//							count++;
//						}
//						else {
//							System.out.println("Invalid side!");
//						}
//						break;
//						
//					case "Triangle":
//						if(tokens.length == 4 && Double.parseDouble(tokens[1]) > 0 &&  Double.parseDouble(tokens[2]) > 0 &&  Double.parseDouble(tokens[3]) > 0
//						&& (Double.parseDouble(tokens[1]) + Double.parseDouble(tokens[2])) > Double.parseDouble(tokens[3])
//						&& (Double.parseDouble(tokens[1]) + Double.parseDouble(tokens[3])) > Double.parseDouble(tokens[2])
//						&& (Double.parseDouble(tokens[2]) + Double.parseDouble(tokens[3])) > Double.parseDouble(tokens[1])
//								) {
//							shapeArray[count] = new Triangle(Double.parseDouble(tokens[1]), Double.parseDouble(tokens[2]), Double.parseDouble(tokens[3]));
//							count++;
//						}
//						else {
//							System.out.println("Invalid side!(s)");
//						}
//						break;
//
//					default:
//					break;
//					}
//				}
			
			if (tokens[0].equals("Circle")) {// check if Shape is a circle else move down to other shapes
				Shapes circle = new Circle(Double.parseDouble(tokens[1]));// create circle instance of Shape
				try {// try this block of code, if an exception is thrown from validate() method jump
						// to catch
					if (circle.validation()) {// validate for negative inputs inherited from Shapes
						shapeArray[count] = circle;// store circle instance into array
						count++;// increase shapes created
					}
				} catch (IllegalArgumentException errorMessage) {// if negative input catch
					System.out.println(errorMessage);// print out error message
				}
			} else if (tokens[0].equals("Square")) {
				Shapes square = new Square(Double.parseDouble(tokens[1]));
				try {
					if (square.validation()) {
						shapeArray[count] = square;
						count++;
					}
				} catch (IllegalArgumentException errorMessage) {
					System.out.println(errorMessage);
				}
			} else if (tokens[0].equals("Rectangle")) {
				Shapes rectangle = new Rectangle(Double.parseDouble(tokens[1]), Double.parseDouble(tokens[2]));
				try {
					if (rectangle.validation()) {
						shapeArray[count] = rectangle;
						count++;
					}
				} catch (IllegalArgumentException errorMessage) {
					System.out.println(errorMessage);
				}
			} else if (tokens[0].equals("Parallelogram")) {
				Shapes parallelogram = new Parallelogram(Double.parseDouble(tokens[1]),
						Double.parseDouble(tokens[2]));
				try {
					if (parallelogram.validation()) {
						shapeArray[count] = parallelogram;
						count++;
					}
				} catch (IllegalArgumentException errorMessage) {
					System.out.println(errorMessage);
				}
			} else if (tokens[0].equals("Triangle")) {
				Shapes triangle = new Triangle(Double.parseDouble(tokens[1]), Double.parseDouble(tokens[2]),
						Double.parseDouble(tokens[3]));
				try {
					if (triangle.validation()) {
						shapeArray[count] = triangle;
						count++;
					}
				} catch (IllegalArgumentException errorMessage) {
					System.out.println(errorMessage);
				}

			}

		}
		} catch (IOException e) {
			 System.out.println(e.getMessage());
			}
		
		System.out.println("\n" + count + " shapes were created:");
		
		for(int i = 0; i < shapeArray.length; i++) {
			System.out.println(shapeArray[i] + "\n");
	
		}	
	}	
	
}
